#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX
# MIT License
#

name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # (新增) 预清理，先腾 8~12GB，避免中途爆盘
    - name: Clean disk space (free ~10 GB)
      run: |
        echo "Before cleanup:"; df -hT
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
        sudo apt-get clean
        sudo rm -rf /home/runner/.cache || true
        docker system prune -af || true
        echo "After cleanup:"; df -hT

    # (新增) 空间体检：<6GB 直接失败，避免编译 90% 才爆
    - name: Guard: ensure free space >= 6G
      shell: bash
      run: |
        avail=$(df -PB1 / | awk 'NR==2{print $4}')
        need=$((6*1024*1024*1024))
        echo "Free bytes: $avail"
        if [ "$avail" -lt "$need" ]; then
          echo "ERROR: Not enough disk space (<6G). Aborting early."
          exit 1
        fi

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt
        ln -sf /workdir/openwrt "$GITHUB_WORKSPACE/openwrt"

    # (新增) 启用 ccache（配置并限制到 3G），二次构建显著加速
    - name: Enable ccache in OpenWrt
      run: |
        mkdir -p ~/.ccache
        printf 'max_size = 3.0G\n' > ~/.ccache/ccache.conf
        cd openwrt
        ./scripts/config -e CCACHE || true
        echo 'CONFIG_CCACHE=y' >> .config
        make defconfig

    # (新增) 缓存 ccache
    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-${{ runner.os }}-${{ hashFiles('openwrt/.config') }}
        restore-keys: |
          ccache-${{ runner.os }}-

    # (新增) 缓存 dl 源码包
    - name: Cache dl
      uses: actions/cache@v4
      with:
        path: openwrt/dl
        key: dl-${{ runner.os }}-${{ hashFiles('openwrt/feeds.conf.default') }}
        restore-keys: |
          dl-${{ runner.os }}-

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    # (新增) 禁用已知易失败的大包（amule + strace），并应用配置
    - name: Disable problematic packages (amule, strace)
      shell: bash
      run: |
        cd openwrt
        # aMule 全家桶 + luci 前端（存在即关）
        for p in amule amuled amule-utils amule-utils-gui amule-webui luci-app-amule; do
          ./scripts/config -d "PACKAGE_${p}" || true
          sed -i "/^CONFIG_PACKAGE_${p}[=m|=y]/d" .config || true
          echo "# CONFIG_PACKAGE_${p} is not set" >> .config
        done
        # strace（之前你遇到过编译失败）
        ./scripts/config -d PACKAGE_strace || true
        sed -i '/^CONFIG_PACKAGE_strace[=m|=y]/d' .config || true
        echo "# CONFIG_PACKAGE_strace is not set" >> .config
        make defconfig
        echo "== after sanitizing =="
        egrep 'amule|luci-app-amule|^CONFIG_PACKAGE_strace' .config || echo "(none)"

    # (新增) 分阶段构建：先 tools / toolchain，快速发现环境/工具问题
    - name: Build tools & toolchain (fail fast)
      shell: bash
      run: |
        cd openwrt
        make defconfig
        make tools/install -j"$(nproc)"
        make toolchain/install -j"$(nproc)"

    # (新增) 早期探测敏感包（若用户误勾选仍会尽早失败，不浪费几个小时）
    - name: Early package probe (fast fail)
      shell: bash
      run: |
        set -e
        cd openwrt
        CANDIDATES=$(grep -E '^CONFIG_PACKAGE_(amule|strace).+=(y|m)$' .config \
          | sed -E 's/^CONFIG_PACKAGE_(.+)=(y|m)/\1/' || true)
        for p in $CANDIDATES; do
          echo ">>> probing package: $p"
          make -j"$(nproc)" "package/$p/compile" V=s
        done

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \; | cat
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware (low log)
      id: compile
      shell: bash
      run: |
        set -e
        cd openwrt
        echo -e "$(nproc) thread compile"
        JOBS=$(( $(nproc) + 1 ))
        # 先少日志编译，失败再回退单线程 + V=s 抓详细栈
        if ! make -j"$JOBS"; then
          echo "parallel failed, fallback to -j1 V=s"
          make -j1 V=s
        fi
        # 没有 targets 就视为失败（防止“假成功”）
        if [ ! -d "bin/targets" ]; then
          echo "build finished but no bin/targets"; exit 1
        fi
        echo "status=success" >> "$GITHUB_OUTPUT"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME || true
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> "$GITHUB_ENV"
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> "$GITHUB_ENV"

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    # (替换原 Organize files) 只在成功后定位固件目录；更稳，不会通配到根目录
    - name: Locate firmware directory
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      shell: bash
      run: |
        set -euo pipefail
        shopt -s nullglob
        base="$GITHUB_WORKSPACE/openwrt/bin/targets"
        [ -d "$base" ] || { echo "No bin/targets directory"; exit 1; }
        arr=("$base"/*/*)
        if [[ ${#arr[@]} -eq 0 ]]; then
          echo "No firmware subdir under $base"; exit 1
        fi
        FIRMWARE="${arr[0]}"
        echo "FIRMWARE=$FIRMWARE" >> "$GITHUB_ENV"
        echo "Firmware dir: $FIRMWARE"
        ls -lh "$FIRMWARE"
        echo "status=success" >> "$GITHUB_OUTPUT"

    - name: Upload firmware directory
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> "$GITHUB_OUTPUT"
        echo "status=success" >> "$GITHUB_OUTPUT"
        : > release.txt

    # 仅上传固件常见后缀，避免把 /swapfile 之类误上传
    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && steps.organize.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ${{ env.FIRMWARE }}/*.bin
          ${{ env.FIRMWARE }}/*.img.gz
          ${{ env.FIRMWARE }}/*.tar
          ${{ env.FIRMWARE }}/*.manifest

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    # (新增) 构建后清理，避免尾声步骤再写盘失败
    - name: Post-build cleanup (free space)
      if: always()
      run: |
        cd openwrt
        rm -rf build_dir/host build_dir/hostpkg || true
        rm -rf build_dir/toolchain-* || true
        rm -rf staging_dir/host staging_dir/hostpkg || true
        echo "After post-clean:"; df -hT

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
